import streamlit as st
import autogen
import random
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import io
import os
from dotenv import load_dotenv
load_dotenv()

# Configuration for the LLM (e.g., OpenAI GPT-4)
config_list = [
    {
        "model": "gpt-4o-mini",  
        'api_key': st.secrets['OPENAI_API_KEY'] 
    }
]

# Define AutoGen Agents
user_proxy = autogen.UserProxyAgent(
    name="UserProxy",
    human_input_mode="NEVER",  # No human input during chat; handled by Streamlit
    max_consecutive_auto_reply=0,
    code_execution_config={"use_docker": False, "work_dir": "health_assistant"},  # Disable Docker
    system_message="You relay user inputs to other agents and return their outputs."
)

user_details_agent = autogen.AssistantAgent(
    name="UserDetailsAgent",
    llm_config={"config_list": config_list},
    system_message="You process user health details and pass them to other agents."
)

fitness_tracker_agent = autogen.AssistantAgent(
    name="FitnessTrackerAgent",
    llm_config={"config_list": config_list},
    system_message="You simulate fitness tracker data (steps, calories burned, active minutes, sleep hours) and share it."
)

exercise_agent = autogen.AssistantAgent(
    name="ExerciseAgent",
    llm_config={"config_list": config_list},
    system_message="You generate a personalized exercise plan based on user details and fitness tracker data."
)

diet_agent = autogen.AssistantAgent(
    name="DietAgent",
    llm_config={"config_list": config_list},
    system_message="You generate a personalized diet plan based on user details and dietary preferences."
)

display_agent = autogen.AssistantAgent(
    name="DisplayAgent",
    llm_config={"config_list": config_list},
    system_message="You compile and format the final health plan from all agents' outputs."
)

# Group chat setup
group_chat = autogen.GroupChat(
    agents=[user_proxy, user_details_agent, fitness_tracker_agent, exercise_agent, diet_agent, display_agent],
    messages=[],
    max_round=10
)

group_chat_manager = autogen.GroupChatManager(
    groupchat=group_chat,
    llm_config={"config_list": config_list}
)

# Simulate fitness tracker data
def sync_fitness_tracker():
    return {
        "steps": random.randint(3000, 15000),
        "calories_burned": random.randint(200, 800),
        "active_minutes": random.randint(30, 120),
        "sleep_hours": random.randint(6, 9)
    }

# Generate PDF
def generate_pdf(content):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    for line in content.split("\n"):
        if line.strip():
            story.append(Paragraph(line, styles["Normal"]))
        story.append(Spacer(1, 12))

    doc.build(story)
    buffer.seek(0)
    return buffer

# Process health plan with AutoGen
def generate_health_plan(user_data):
    fitness_data = sync_fitness_tracker()
    
    # Format user input for AutoGen
    user_input = (
        f"User Details: Name: {user_data['name']}, Age: {user_data['age']}, Gender: {user_data['gender']}, "
        f"Weight: {user_data['weight']} kg, Height: {user_data['height']} cm, "
        f"Activity Level: {user_data['activity_level']}, Fitness Goals: {user_data['fitness_goals']}, "
        f"Dietary Preference: {user_data['diet_preference']}"
    )

    # Start chat with group chat manager
    chat_result = user_proxy.initiate_chat(
        group_chat_manager,
        message=f"{user_input}\nPlease create a personalized health plan including fitness tracker data, exercise plan, and diet plan."
    )

    # Extract the final output from the chat (assuming DisplayAgent provides it)
    final_output = ""
    for msg in chat_result.chat_history:
        if msg["name"] == "DisplayAgent":
            final_output = msg["content"]
            break
    
    # Fallback if no DisplayAgent output
    if not final_output:
        final_output = (
            f"Name: {user_data['name']}\n"
            f"Age: {user_data['age']}\n"
            f"Gender: {user_data['gender']}\n"
            f"Fitness Goals: {user_data['fitness_goals']}\n"
            f"Diet Preference: {user_data['diet_preference']}\n"
            f"Activity Level: {user_data['activity_level']}\n"
            f"Fitness Tracker Data: Steps: {fitness_data['steps']}, Calories Burned: {fitness_data['calories_burned']}, "
            f"Active Minutes: {fitness_data['active_minutes']}, Sleep Hours: {fitness_data['sleep_hours']}\n"
            f"Exercise Plan: Generated by ExerciseAgent\n"
            f"Diet Plan: Generated by DietAgent"
        )

    return final_output, fitness_data

# Streamlit UI
def main():
    st.title("AI Fitness & Diet assistant")
    st.write("Enter your details below to get a personalized health plan.")

    # Form for user input
    with st.form(key="health_form"):
        name = st.text_input("Name")
        age = st.number_input("Age", min_value=1, max_value=120, step=1)
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        weight = st.number_input("Weight (kg)", min_value=1.0, step=0.1)
        height = st.number_input("Height (cm)", min_value=1.0, step=0.1)
        activity_level = st.selectbox("Activity Level", ["Sedentary", "Light", "Active", "Very Active"])
        fitness_goals = st.selectbox("Fitness Goals", ["Weight Loss", "Muscle Gain", "Endurance"])
        diet_preference = st.selectbox("Dietary Preference", ["Vegetarian", "non-Vegetarian", "Keto", "None"])
        submit_button = st.form_submit_button(label="Generate Health Plan")

    if submit_button:
        # Collect user data
        user_data = {
            "name": name,
            "age": age,
            "gender": gender,
            "weight": weight,
            "height": height,
            "activity_level": activity_level,
            "fitness_goals": fitness_goals,
            "diet_preference": diet_preference
        }

        # Generate health plan
        with st.spinner("Generating your personalized health plan..."):
            health_plan, fitness_data = generate_health_plan(user_data)

        # Display the result
        st.subheader("Your Personalized Health Plan")
        st.write(health_plan)

        # Generate and provide PDF download
        pdf_buffer = generate_pdf(health_plan)
        st.download_button(
            label="Download Health Plan as PDF",
            data=pdf_buffer,
            file_name=f"{user_data['name']}_Health_Plan.pdf",
            mime="application/pdf"
        )

if __name__ == "__main__":
    main()